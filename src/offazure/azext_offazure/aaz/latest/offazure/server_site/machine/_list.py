# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "offazure server-site machine list",
)
class List(AAZCommand):
    """List all machines in a site.
    """

    _aaz_info = {
        "version": "2023-06-06",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.offazure/serversites/{}/machines", "2023-06-06"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.site_name = AAZStrArg(
            options=["--site-name"],
            help="Site name",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        _args_schema.continuation_token = AAZStrArg(
            options=["--continuation-token"],
            help="Optional parameter for continuation token.",
        )
        _args_schema.filter = AAZStrArg(
            options=["--filter"],
            help="filter query",
        )
        _args_schema.top = AAZStrArg(
            options=["--top"],
            help="page size  query",
        )
        _args_schema.total_record_count = AAZIntArg(
            options=["--total-record-count"],
            help="Total count of machines in the given site.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ServersControllerListByServerSiteResource(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class ServersControllerListByServerSiteResource(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/serverSites/{siteName}/machines",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "siteName", self.ctx.args.site_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "continuationToken", self.ctx.args.continuation_token,
                ),
                **self.serialize_query_param(
                    "filter", self.ctx.args.filter,
                ),
                **self.serialize_query_param(
                    "top", self.ctx.args.top,
                ),
                **self.serialize_query_param(
                    "totalRecordCount", self.ctx.args.total_record_count,
                ),
                **self.serialize_query_param(
                    "api-version", "2023-06-06",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.allocated_memory_in_mb = AAZFloatType(
                serialized_name="allocatedMemoryInMb",
            )
            properties.appliance_names = AAZListType(
                serialized_name="applianceNames",
                flags={"read_only": True},
            )
            properties.application_discovery = AAZObjectType(
                serialized_name="applicationDiscovery",
            )
            properties.apps_and_roles = AAZObjectType(
                serialized_name="appsAndRoles",
            )
            properties.bios_guid = AAZStrType(
                serialized_name="biosGuid",
            )
            properties.bios_serial_number = AAZStrType(
                serialized_name="biosSerialNumber",
            )
            properties.created_timestamp = AAZStrType(
                serialized_name="createdTimestamp",
                flags={"read_only": True},
            )
            properties.dependency_map_discovery = AAZObjectType(
                serialized_name="dependencyMapDiscovery",
            )
            properties.dependency_mapping = AAZStrType(
                serialized_name="dependencyMapping",
                flags={"read_only": True},
            )
            properties.dependency_mapping_end_time = AAZStrType(
                serialized_name="dependencyMappingEndTime",
                flags={"read_only": True},
            )
            properties.dependency_mapping_start_time = AAZStrType(
                serialized_name="dependencyMappingStartTime",
                flags={"read_only": True},
            )
            properties.disks = AAZListType()
            properties.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"read_only": True},
            )
            properties.errors = AAZListType(
                flags={"read_only": True},
            )
            properties.firmware = AAZStrType()
            properties.fqdn = AAZStrType()
            properties.guest_details_discovery_timestamp = AAZStrType(
                serialized_name="guestDetailsDiscoveryTimestamp",
                flags={"read_only": True},
            )
            properties.guest_os_details = AAZObjectType(
                serialized_name="guestOsDetails",
            )
            properties.hydrated_fqdn = AAZStrType(
                serialized_name="hydratedFqdn",
            )
            properties.iis_discovery = AAZObjectType(
                serialized_name="iisDiscovery",
            )
            _ListHelper._build_schema_web_app_discovery_read(properties.iis_discovery)
            properties.is_deleted = AAZBoolType(
                serialized_name="isDeleted",
                flags={"read_only": True},
            )
            properties.is_guest_details_discovery_in_progress = AAZBoolType(
                serialized_name="isGuestDetailsDiscoveryInProgress",
                flags={"read_only": True},
            )
            properties.network_adapters = AAZListType(
                serialized_name="networkAdapters",
            )
            properties.number_of_applications = AAZIntType(
                serialized_name="numberOfApplications",
                flags={"read_only": True},
            )
            properties.number_of_processor_core = AAZIntType(
                serialized_name="numberOfProcessorCore",
            )
            properties.operating_system_details = AAZObjectType(
                serialized_name="operatingSystemDetails",
            )
            properties.oracle_discovery = AAZObjectType(
                serialized_name="oracleDiscovery",
            )
            properties.processor_info = AAZObjectType(
                serialized_name="processorInfo",
            )
            properties.product_support_status = AAZObjectType(
                serialized_name="productSupportStatus",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            properties.run_as_account_id = AAZStrType(
                serialized_name="runAsAccountId",
            )
            properties.spring_boot_discovery = AAZObjectType(
                serialized_name="springBootDiscovery",
            )
            properties.sql_discovery = AAZObjectType(
                serialized_name="sqlDiscovery",
            )
            properties.static_discovery = AAZObjectType(
                serialized_name="staticDiscovery",
            )
            properties.tags = AAZDictType()
            properties.tomcat_discovery = AAZObjectType(
                serialized_name="tomcatDiscovery",
            )
            _ListHelper._build_schema_web_app_discovery_read(properties.tomcat_discovery)
            properties.updated_timestamp = AAZStrType(
                serialized_name="updatedTimestamp",
                flags={"read_only": True},
            )
            properties.validation_required = AAZStrType(
                serialized_name="validationRequired",
            )
            properties.web_app_discovery = AAZObjectType(
                serialized_name="webAppDiscovery",
            )
            _ListHelper._build_schema_web_app_discovery_read(properties.web_app_discovery)

            appliance_names = cls._schema_on_200.value.Element.properties.appliance_names
            appliance_names.Element = AAZStrType()

            application_discovery = cls._schema_on_200.value.Element.properties.application_discovery
            application_discovery.discovery_scope_status = AAZStrType(
                serialized_name="discoveryScopeStatus",
            )
            application_discovery.errors = AAZListType(
                flags={"read_only": True},
            )
            application_discovery.hydrated_run_as_account_id = AAZStrType(
                serialized_name="hydratedRunAsAccountId",
                flags={"read_only": True},
            )

            errors = cls._schema_on_200.value.Element.properties.application_discovery.errors
            errors.Element = AAZObjectType()
            _ListHelper._build_schema_health_error_details_read(errors.Element)

            apps_and_roles = cls._schema_on_200.value.Element.properties.apps_and_roles
            apps_and_roles.applications = AAZListType(
                flags={"read_only": True},
            )
            apps_and_roles.biz_talk_servers = AAZListType(
                serialized_name="bizTalkServers",
                flags={"read_only": True},
            )
            apps_and_roles.exchange_servers = AAZListType(
                serialized_name="exchangeServers",
                flags={"read_only": True},
            )
            apps_and_roles.features = AAZListType(
                flags={"read_only": True},
            )
            apps_and_roles.other_databases = AAZListType(
                serialized_name="otherDatabases",
                flags={"read_only": True},
            )
            apps_and_roles.share_point_servers = AAZListType(
                serialized_name="sharePointServers",
                flags={"read_only": True},
            )
            apps_and_roles.sql_servers = AAZListType(
                serialized_name="sqlServers",
                flags={"read_only": True},
            )
            apps_and_roles.system_centers = AAZListType(
                serialized_name="systemCenters",
                flags={"read_only": True},
            )
            apps_and_roles.web_applications = AAZListType(
                serialized_name="webApplications",
                flags={"read_only": True},
            )

            applications = cls._schema_on_200.value.Element.properties.apps_and_roles.applications
            applications.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.applications.Element
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.provider = AAZStrType(
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            biz_talk_servers = cls._schema_on_200.value.Element.properties.apps_and_roles.biz_talk_servers
            biz_talk_servers.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.biz_talk_servers.Element
            _element.product_name = AAZStrType(
                serialized_name="productName",
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )

            exchange_servers = cls._schema_on_200.value.Element.properties.apps_and_roles.exchange_servers
            exchange_servers.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.exchange_servers.Element
            _element.edition = AAZStrType(
                flags={"read_only": True},
            )
            _element.product_name = AAZStrType(
                serialized_name="productName",
                flags={"read_only": True},
            )
            _element.roles = AAZStrType(
                flags={"read_only": True},
            )
            _element.service_pack = AAZStrType(
                serialized_name="servicePack",
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            features = cls._schema_on_200.value.Element.properties.apps_and_roles.features
            features.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.features.Element
            _element.feature_type = AAZStrType(
                serialized_name="featureType",
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.parent = AAZStrType(
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )

            other_databases = cls._schema_on_200.value.Element.properties.apps_and_roles.other_databases
            other_databases.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.other_databases.Element
            _element.database_type = AAZStrType(
                serialized_name="databaseType",
                flags={"read_only": True},
            )
            _element.instance = AAZStrType(
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            share_point_servers = cls._schema_on_200.value.Element.properties.apps_and_roles.share_point_servers
            share_point_servers.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.share_point_servers.Element
            _element.is_enterprise = AAZBoolType(
                serialized_name="isEnterprise",
                flags={"read_only": True},
            )
            _element.product_name = AAZStrType(
                serialized_name="productName",
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            sql_servers = cls._schema_on_200.value.Element.properties.apps_and_roles.sql_servers
            sql_servers.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.sql_servers.Element
            _element.cluster_name = AAZStrType(
                serialized_name="clusterName",
                flags={"read_only": True},
            )
            _element.clustered = AAZStrType(
                flags={"read_only": True},
            )
            _element.comma_separated_ips = AAZStrType(
                serialized_name="commaSeparatedIps",
                flags={"read_only": True},
            )
            _element.dns_host_name = AAZStrType(
                serialized_name="dnsHostName",
                flags={"read_only": True},
            )
            _element.edition = AAZStrType(
                flags={"read_only": True},
            )
            _element.is_named_pipe_enabled = AAZBoolType(
                serialized_name="isNamedPipeEnabled",
                flags={"read_only": True},
            )
            _element.is_tcp_ip_enabled = AAZBoolType(
                serialized_name="isTcpIpEnabled",
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.named_pipe_name = AAZStrType(
                serialized_name="namedPipeName",
                flags={"read_only": True},
            )
            _element.port = AAZStrType(
                flags={"read_only": True},
            )
            _element.service_pack = AAZStrType(
                serialized_name="servicePack",
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            system_centers = cls._schema_on_200.value.Element.properties.apps_and_roles.system_centers
            system_centers.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.system_centers.Element
            _element.product_name = AAZStrType(
                serialized_name="productName",
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            web_applications = cls._schema_on_200.value.Element.properties.apps_and_roles.web_applications
            web_applications.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.web_applications.Element
            _element.application_pool = AAZStrType(
                serialized_name="applicationPool",
                flags={"read_only": True},
            )
            _element.group_name = AAZStrType(
                serialized_name="groupName",
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.platform = AAZStrType(
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )
            _element.web_server = AAZStrType(
                serialized_name="webServer",
                flags={"read_only": True},
            )

            dependency_map_discovery = cls._schema_on_200.value.Element.properties.dependency_map_discovery
            dependency_map_discovery.discovery_scope_status = AAZStrType(
                serialized_name="discoveryScopeStatus",
            )
            dependency_map_discovery.errors = AAZListType(
                flags={"read_only": True},
            )
            dependency_map_discovery.hydrated_run_as_account_id = AAZStrType(
                serialized_name="hydratedRunAsAccountId",
                flags={"read_only": True},
            )

            errors = cls._schema_on_200.value.Element.properties.dependency_map_discovery.errors
            errors.Element = AAZObjectType()
            _ListHelper._build_schema_health_error_details_read(errors.Element)

            disks = cls._schema_on_200.value.Element.properties.disks
            disks.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.disks.Element
            _element.disk_type = AAZStrType(
                serialized_name="diskType",
            )
            _element.generated_id = AAZStrType(
                serialized_name="generatedId",
            )
            _element.id = AAZStrType()
            _element.lun = AAZIntType()
            _element.max_size_in_bytes = AAZIntType(
                serialized_name="maxSizeInBytes",
            )
            _element.name = AAZStrType()
            _element.path = AAZStrType()

            errors = cls._schema_on_200.value.Element.properties.errors
            errors.Element = AAZObjectType()
            _ListHelper._build_schema_health_error_details_read(errors.Element)

            guest_os_details = cls._schema_on_200.value.Element.properties.guest_os_details
            guest_os_details.os_architecture = AAZStrType(
                serialized_name="osArchitecture",
            )
            guest_os_details.os_name = AAZStrType(
                serialized_name="osName",
            )
            guest_os_details.os_type = AAZStrType(
                serialized_name="osType",
            )
            guest_os_details.os_version = AAZStrType(
                serialized_name="osVersion",
            )

            network_adapters = cls._schema_on_200.value.Element.properties.network_adapters
            network_adapters.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.network_adapters.Element
            _element.ip_address_list = AAZListType(
                serialized_name="ipAddressList",
                flags={"read_only": True},
            )
            _element.ip_address_type = AAZStrType(
                serialized_name="ipAddressType",
            )
            _element.mac_address = AAZStrType(
                serialized_name="macAddress",
            )
            _element.network_name = AAZStrType(
                serialized_name="networkName",
            )
            _element.nic_id = AAZStrType(
                serialized_name="nicId",
            )

            ip_address_list = cls._schema_on_200.value.Element.properties.network_adapters.Element.ip_address_list
            ip_address_list.Element = AAZStrType()

            operating_system_details = cls._schema_on_200.value.Element.properties.operating_system_details
            operating_system_details.os_architecture = AAZStrType(
                serialized_name="osArchitecture",
            )
            operating_system_details.os_name = AAZStrType(
                serialized_name="osName",
            )
            operating_system_details.os_type = AAZStrType(
                serialized_name="osType",
            )
            operating_system_details.os_version = AAZStrType(
                serialized_name="osVersion",
            )

            oracle_discovery = cls._schema_on_200.value.Element.properties.oracle_discovery
            oracle_discovery.discovery_scope_status = AAZStrType(
                serialized_name="discoveryScopeStatus",
            )
            oracle_discovery.shallow_discovery_status = AAZStrType(
                serialized_name="shallowDiscoveryStatus",
            )
            oracle_discovery.total_database_count = AAZIntType(
                serialized_name="totalDatabaseCount",
            )
            oracle_discovery.total_instance_count = AAZIntType(
                serialized_name="totalInstanceCount",
            )

            processor_info = cls._schema_on_200.value.Element.properties.processor_info
            processor_info.name = AAZStrType()
            processor_info.number_of_cores_per_socket = AAZIntType(
                serialized_name="numberOfCoresPerSocket",
            )
            processor_info.number_of_sockets = AAZIntType(
                serialized_name="numberOfSockets",
            )

            product_support_status = cls._schema_on_200.value.Element.properties.product_support_status
            product_support_status.current_version = AAZStrType(
                serialized_name="currentVersion",
            )
            product_support_status.esu_status = AAZStrType(
                serialized_name="esuStatus",
            )
            product_support_status.esu_year = AAZStrType(
                serialized_name="esuYear",
            )
            product_support_status.support_end_date = AAZStrType(
                serialized_name="supportEndDate",
            )
            product_support_status.support_status = AAZStrType(
                serialized_name="supportStatus",
            )

            spring_boot_discovery = cls._schema_on_200.value.Element.properties.spring_boot_discovery
            spring_boot_discovery.discovery_scope_status = AAZStrType(
                serialized_name="discoveryScopeStatus",
            )
            spring_boot_discovery.shallow_discovery_status = AAZStrType(
                serialized_name="shallowDiscoveryStatus",
            )
            spring_boot_discovery.total_application_count = AAZIntType(
                serialized_name="totalApplicationCount",
            )
            spring_boot_discovery.total_instance_count = AAZIntType(
                serialized_name="totalInstanceCount",
            )

            sql_discovery = cls._schema_on_200.value.Element.properties.sql_discovery
            sql_discovery.discovery_scope_status = AAZStrType(
                serialized_name="discoveryScopeStatus",
            )
            sql_discovery.sql_metadata_discovery_pipe = AAZStrType(
                serialized_name="sqlMetadataDiscoveryPipe",
            )
            sql_discovery.sql_metadata_hydrated_run_as_account_id = AAZStrType(
                serialized_name="sqlMetadataHydratedRunAsAccountId",
            )
            sql_discovery.successfully_discovered_server_count = AAZIntType(
                serialized_name="successfullyDiscoveredServerCount",
            )
            sql_discovery.total_server_count = AAZIntType(
                serialized_name="totalServerCount",
            )

            static_discovery = cls._schema_on_200.value.Element.properties.static_discovery
            static_discovery.discovery_scope_status = AAZStrType(
                serialized_name="discoveryScopeStatus",
            )
            static_discovery.errors = AAZListType(
                flags={"read_only": True},
            )
            static_discovery.hydrated_run_as_account_id = AAZStrType(
                serialized_name="hydratedRunAsAccountId",
                flags={"read_only": True},
            )

            errors = cls._schema_on_200.value.Element.properties.static_discovery.errors
            errors.Element = AAZObjectType()
            _ListHelper._build_schema_health_error_details_read(errors.Element)

            tags = cls._schema_on_200.value.Element.properties.tags
            tags.Element = AAZObjectType()

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""

    _schema_health_error_details_read = None

    @classmethod
    def _build_schema_health_error_details_read(cls, _schema):
        if cls._schema_health_error_details_read is not None:
            _schema.appliance_name = cls._schema_health_error_details_read.appliance_name
            _schema.code = cls._schema_health_error_details_read.code
            _schema.discovery_scope = cls._schema_health_error_details_read.discovery_scope
            _schema.id = cls._schema_health_error_details_read.id
            _schema.message = cls._schema_health_error_details_read.message
            _schema.message_parameters = cls._schema_health_error_details_read.message_parameters
            _schema.possible_causes = cls._schema_health_error_details_read.possible_causes
            _schema.recommended_action = cls._schema_health_error_details_read.recommended_action
            _schema.run_as_account_id = cls._schema_health_error_details_read.run_as_account_id
            _schema.severity = cls._schema_health_error_details_read.severity
            _schema.source = cls._schema_health_error_details_read.source
            _schema.summary_message = cls._schema_health_error_details_read.summary_message
            _schema.updated_time_stamp = cls._schema_health_error_details_read.updated_time_stamp
            return

        cls._schema_health_error_details_read = _schema_health_error_details_read = AAZObjectType()

        health_error_details_read = _schema_health_error_details_read
        health_error_details_read.appliance_name = AAZStrType(
            serialized_name="applianceName",
            flags={"read_only": True},
        )
        health_error_details_read.code = AAZStrType(
            flags={"read_only": True},
        )
        health_error_details_read.discovery_scope = AAZStrType(
            serialized_name="discoveryScope",
        )
        health_error_details_read.id = AAZIntType(
            flags={"read_only": True},
        )
        health_error_details_read.message = AAZStrType(
            flags={"read_only": True},
        )
        health_error_details_read.message_parameters = AAZDictType(
            serialized_name="messageParameters",
            flags={"read_only": True},
        )
        health_error_details_read.possible_causes = AAZStrType(
            serialized_name="possibleCauses",
            flags={"read_only": True},
        )
        health_error_details_read.recommended_action = AAZStrType(
            serialized_name="recommendedAction",
            flags={"read_only": True},
        )
        health_error_details_read.run_as_account_id = AAZStrType(
            serialized_name="runAsAccountId",
            flags={"read_only": True},
        )
        health_error_details_read.severity = AAZStrType(
            flags={"read_only": True},
        )
        health_error_details_read.source = AAZStrType()
        health_error_details_read.summary_message = AAZStrType(
            serialized_name="summaryMessage",
            flags={"read_only": True},
        )
        health_error_details_read.updated_time_stamp = AAZStrType(
            serialized_name="updatedTimeStamp",
            flags={"read_only": True},
        )

        message_parameters = _schema_health_error_details_read.message_parameters
        message_parameters.Element = AAZStrType()

        _schema.appliance_name = cls._schema_health_error_details_read.appliance_name
        _schema.code = cls._schema_health_error_details_read.code
        _schema.discovery_scope = cls._schema_health_error_details_read.discovery_scope
        _schema.id = cls._schema_health_error_details_read.id
        _schema.message = cls._schema_health_error_details_read.message
        _schema.message_parameters = cls._schema_health_error_details_read.message_parameters
        _schema.possible_causes = cls._schema_health_error_details_read.possible_causes
        _schema.recommended_action = cls._schema_health_error_details_read.recommended_action
        _schema.run_as_account_id = cls._schema_health_error_details_read.run_as_account_id
        _schema.severity = cls._schema_health_error_details_read.severity
        _schema.source = cls._schema_health_error_details_read.source
        _schema.summary_message = cls._schema_health_error_details_read.summary_message
        _schema.updated_time_stamp = cls._schema_health_error_details_read.updated_time_stamp

    _schema_web_app_discovery_read = None

    @classmethod
    def _build_schema_web_app_discovery_read(cls, _schema):
        if cls._schema_web_app_discovery_read is not None:
            _schema.discovery_scope_status = cls._schema_web_app_discovery_read.discovery_scope_status
            _schema.total_web_application_count = cls._schema_web_app_discovery_read.total_web_application_count
            _schema.total_web_server_count = cls._schema_web_app_discovery_read.total_web_server_count
            return

        cls._schema_web_app_discovery_read = _schema_web_app_discovery_read = AAZObjectType()

        web_app_discovery_read = _schema_web_app_discovery_read
        web_app_discovery_read.discovery_scope_status = AAZStrType(
            serialized_name="discoveryScopeStatus",
        )
        web_app_discovery_read.total_web_application_count = AAZIntType(
            serialized_name="totalWebApplicationCount",
        )
        web_app_discovery_read.total_web_server_count = AAZIntType(
            serialized_name="totalWebServerCount",
        )

        _schema.discovery_scope_status = cls._schema_web_app_discovery_read.discovery_scope_status
        _schema.total_web_application_count = cls._schema_web_app_discovery_read.total_web_application_count
        _schema.total_web_server_count = cls._schema_web_app_discovery_read.total_web_server_count


__all__ = ["List"]
